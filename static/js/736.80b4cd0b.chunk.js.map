{"version":3,"file":"static/js/736.80b4cd0b.chunk.js","mappings":"+QAMaA,EAAU,WACrB,IAAQC,GAAYC,EAAAA,EAAAA,MAAZD,QAER,GAA8BE,EAAAA,EAAAA,UAAS,IAAvC,eAAOC,EAAP,KAAgBC,EAAhB,KACA,GAA0BF,EAAAA,EAAAA,UAAS,MAAnC,eAAOG,EAAP,KAAcC,EAAd,KACA,GAA8BJ,EAAAA,EAAAA,WAAS,GAAvC,eAAOK,EAAP,KAAgBC,EAAhB,KAoBA,OAlBAC,EAAAA,EAAAA,YAAU,WACR,IAAMC,EAAmB,mCAAG,2FAC1BF,GAAW,GADe,mBAGLG,EAAAA,EAAAA,IAAkBX,GAHb,OAGlBY,EAHkB,OAIxBC,QAAQC,IAAI,OAAQF,GACpBR,EAAWQ,EAAKG,SALQ,gDAOxBT,EAAS,EAAD,IAPgB,yBAUxBE,GAAW,GAVa,4EAAH,qDAczBE,GACD,GAAE,CAACV,KAGF,2BACIK,IACA,+BACGE,IAAW,SAAC,KAAD,IACQ,IAAnBJ,EAAQa,QACP,SAAC,KAAD,CAAab,QAASA,KAEtB,8CAMX,C,4MC3CKc,EAAU,mCAChBC,IAAAA,SAAAA,QAAyB,gCAElB,IAAMC,EAAiB,mCAAG,sGACRD,IAAAA,IAAA,qCAAwCD,IADhC,uBACvBL,EADuB,EACvBA,KADuB,kBAExBA,GAFwB,2CAAH,qDAKjBQ,EAAe,mCAAG,WAAMC,GAAN,yFACNH,IAAAA,IAAA,+BACGD,EADH,kBACoBI,EADpB,yBADM,uBACrBT,EADqB,EACrBA,KADqB,kBAItBA,GAJsB,2CAAH,sDAOfU,EAAmB,mCAAG,WAAMC,GAAN,yFACVL,IAAAA,IAAA,gBAAmBK,EAAnB,oBAAiCN,IADvB,uBACzBL,EADyB,EACzBA,KADyB,kBAE1BA,GAF0B,2CAAH,sDAKnBY,EAAc,mCAAG,WAAMD,GAAN,yFACLL,IAAAA,IAAA,gBAAmBK,EAAnB,4BAAyCN,IADpC,uBACpBL,EADoB,EACpBA,KADoB,kBAErBA,GAFqB,2CAAH,sDAKdD,EAAiB,mCAAG,WAAMY,GAAN,yFACRL,IAAAA,IAAA,gBAAmBK,EAAnB,4BAAyCN,IADjC,uBACvBL,EADuB,EACvBA,KADuB,kBAExBA,GAFwB,2CAAH,qD","sources":["pages/Reviews.jsx","services/services.js"],"sourcesContent":["import { useState, useEffect } from 'react';\nimport { getMovieByReviews } from 'services/services';\nimport { useParams } from 'react-router-dom';\nimport { Loader } from 'components';\nimport { ReviewsList } from 'components';\n\nexport const Reviews = () => {\n  const { movieId } = useParams();\n\n  const [reviews, setReviews] = useState([]);\n  const [error, setError] = useState(null);\n  const [loading, setLoading] = useState(false);\n\n  useEffect(() => {\n    const fetchMovieByReviews = async () => {\n      setLoading(true);\n      try {\n        const data = await getMovieByReviews(movieId);\n        console.log('data', data);\n        setReviews(data.results);\n      } catch (error) {\n        setError(error);\n        //   toast.error(`Not Found`);\n      } finally {\n        setLoading(false);\n      }\n    };\n\n    fetchMovieByReviews();\n  }, [movieId]);\n\n  return (\n    <main>\n      {!error && (\n        <section>\n          {loading && <Loader />}\n          {reviews.length !== 0 ? (\n            <ReviewsList reviews={reviews} />\n          ) : (\n            <p>No information</p>\n          )}\n        </section>\n      )}\n    </main>\n  );\n};\n","import axios from 'axios';\n\nconst API_KEY = '833791a5e754a1f0443be5fc62646bdb';\naxios.defaults.baseURL = 'https://api.themoviedb.org/3/';\n\nexport const getTrendingMovies = async () => {\n  const { data } = await axios.get(`trending/movie/day?api_key=${API_KEY}`);\n  return data;\n};\n\nexport const getSearchMovies = async searchQuery => {\n  const { data } = await axios.get(\n    `search/movie?api_key=${API_KEY}&query=${searchQuery}&include_adult=false`\n  );\n  return data;\n};\n\nexport const getMovieDetailsById = async id => {\n  const { data } = await axios.get(`movie/${id}?api_key=${API_KEY}`);\n  return data;\n};\n\nexport const getMovieByCast = async id => {\n  const { data } = await axios.get(`movie/${id}/credits?api_key=${API_KEY}`);\n  return data;\n};\n\nexport const getMovieByReviews = async id => {\n  const { data } = await axios.get(`movie/${id}/reviews?api_key=${API_KEY}`);\n  return data;\n};\n"],"names":["Reviews","movieId","useParams","useState","reviews","setReviews","error","setError","loading","setLoading","useEffect","fetchMovieByReviews","getMovieByReviews","data","console","log","results","length","API_KEY","axios","getTrendingMovies","getSearchMovies","searchQuery","getMovieDetailsById","id","getMovieByCast"],"sourceRoot":""}